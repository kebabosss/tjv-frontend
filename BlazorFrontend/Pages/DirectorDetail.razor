@page "/DirectorDetail/{Id:long}"
@using System.Net
@using BlazorFrontend.DTO
@inject NavigationManager Navigation
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject HttpClient Http


<MudContainer MaxWidth="MaxWidth.Medium" Style="padding-top: 2%">
    <MudPaper Style="padding: 2%">
        <MudForm @ref="_form" @bind-IsValid="@_valid" ValidationDelay="0" SuppressImplicitSubmission="false">
            <MudTextField @bind-Value="_changedObject.name" Label="Jméno" Variant="Variant.Outlined" Required="true"/>
            <MudNumericField @bind-Value="_changedObject.yearOfBirth" Label="Rok narození" Min="1826" Max="@(DateTime.Now.Year)" Variant="Variant.Outlined" Required="true"/>
        </MudForm>
    </MudPaper>
    <MudContainer Style="padding-top: 1%; padding-right: 0; padding-left: 0">
        <MudContainer MaxWidth="MaxWidth.Large" Style="position: relative; padding: 3% 0 3%;" hidden="@_movieAdd">
            <MudDataGrid T="MovieDTO" MultiSelection="false" Items="@_movieData" SortMode="SortMode.Multiple"
                         Filterable="false" Hover="true"
                         Hideable="false" Dense="true" Striped="true" ShowColumnOptions="false">
                <ToolBarContent>
                    <MudText Typo="Typo.h6">Filmy</MudText>
                    <MudSpacer/>
                    <MudButton Variant="Variant.Outlined" Color="Color.Default" OnClick="@AddMovieEnable">Přidat film</MudButton>
                </ToolBarContent>
                <Columns>
                    <PropertyColumn Property="x => x.name" Title="Název" Sortable="true"
                                    InitialDirection="SortDirection.Ascending"/>
                    <PropertyColumn Property="x => x.releaseYear" Title="Rok narození" Sortable="true"/>
                    <TemplateColumn CellClass="justify-center" Title="Odebrat film">
                        <CellTemplate>
                            <MudIconButton Icon="@Icons.Material.Outlined.RemoveCircleOutline" Color="Color.Error" Size="Size.Small" OnClick="() => RemoveMovie(context.Item)"></MudIconButton>
                        </CellTemplate>
                    </TemplateColumn>
                </Columns>
                <PagerContent>
                    <MudDataGridPager T="MovieDTO" RowsPerPageString="Položek na stránku: "/>
                </PagerContent>
            </MudDataGrid>
        </MudContainer>
        <MudContainer MaxWidth="MaxWidth.Large" Style="position: relative; padding: 3% 0 3%;" hidden="@(!_movieAdd)">
            <MudPaper Style="padding: 2%">
                <MudForm @ref="_formMovie" @bind-IsValid="@_validMovie" ValidationDelay="0" SuppressImplicitSubmission="false">
                    <MudTextField @bind-Value="movieName" Label="Jméno" Variant="Variant.Outlined" Required="true"
                                  HelperTextOnFocus="true"/>
                    <MudNumericField @bind-Value="movieRelease" Min="1874" Max="@(DateTime.Now.Year)" Label="Rok vydání" Variant="Variant.Outlined" Required="true"
                                     HelperTextOnFocus="true"/>
                </MudForm>
            </MudPaper>
        </MudContainer>
    </MudContainer>
    <MudContainer Style="padding-left: 0; padding-right: 0 ; padding-top: 1%">
        <MudStack Row="true" Justify="Justify.FlexEnd">
            <MudSpacer></MudSpacer>
            <MudButton OnClick="@GoBackClicked" Color="@Color.Default" Variant="Variant.Outlined" Size="Size.Large"
                       Class="add-item-btn" >
                Zpět
            </MudButton>
            <MudButton OnClick="@DeleteClicked" Color="@Color.Error" Variant="Variant.Filled" Size="Size.Large"
                       Class="add-item-btn" hidden="@_movieAdd">
                Smazat
            </MudButton>
            <MudButton OnClick="@SaveClicked" Color="@Color.Success" Variant="Variant.Filled" Size="Size.Large"
                       Class="add-item-btn" hidden="@_movieAdd" Disabled="@(!_valid)">
                Uložit
            </MudButton>
            <MudButton OnClick="@CancelClicked" Color="@Color.Default" Variant="Variant.Outlined" Size="Size.Large"
                       Class="add-item-btn" hidden="@(!_movieAdd)">
                Zrušit
            </MudButton>
            <MudButton OnClick="@AddMovie" Color="@Color.Success" Variant="Variant.Filled" Size="Size.Large"
                       Class="add-item-btn" Disabled="@(!_validMovie)" hidden="@(!_movieAdd)">
                Přidat
            </MudButton>
        </MudStack>
    </MudContainer>
</MudContainer>

@code
{
    /// <summary>
    ///  ID of the document.
    /// </summary>
    [Parameter]
    public long Id { get; set; }

    private bool _validMovie;
    private bool _movieAdd = false;
    private List<MovieDTO> _movieData;
    private string movieName;
    private int movieRelease;
    private bool _valid = true;
    private MudForm? _form;
    private MudForm? _formMovie;
    private DirectorDTO _changedObject = new();

    /// <summary>
    /// Initializes the component.
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await RefreshList();
    }


    private async Task RefreshList()
    {
        var result = await Http.GetFromJsonAsync<DirectorDTO>($"/rest/director/{Id}");
        if (result == null)
        {
            return;
        }

        await GetMovies();
        _changedObject = result;
        StateHasChanged();
    }

    private async Task DeleteClicked()
    {
        var parameters = new DialogParameters
        {
            { "ContentText", "Potvrdit smazání režiséra" },
            { "ButtonText", "Smazat" },
            { "Color", Color.Error }
        };

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        var result = await DialogService.Show<Dialog>("Potvrdit", parameters, options).Result;


        if (result?.Data as bool? == true)
        {
            var response = await Http.DeleteAsync($"/rest/director/{_changedObject.id}");

            if (response.IsSuccessStatusCode)
            {
                GoBackClicked();
                Snackbar.Add("Smazání režiséra bylo úspěšné", Severity.Success);
            }
            else
            {
                Snackbar.Add($"Smazaní režiséra vrátilo chybu: {response.StatusCode}", Severity.Error);
            }
        }
    }

    private void GoBackClicked()
    {
        Navigation.NavigateTo($"/directorList");
    }

    private async Task SaveClicked()
    {
        var parameters = new DialogParameters
        {
            { "ContentText", "Potvrdit uložení změn režiséra. Pokud odstraníte poslední režisérskou vazbu nějakého filmu, tak bude film také odstraněn" },
            { "ButtonText", "Uložit" },
            { "Color", Color.Success }
        };

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        var result = await DialogService.Show<Dialog>("Potvrdit", parameters, options).Result;

        if (result?.Data as bool? == true)
        {
            foreach (var movieDto in _movieData)
            {
                if (movieDto.releaseYear < _changedObject.yearOfBirth)
                {
                    Snackbar.Add("Film nemůže být starší než režisér", Severity.Error);
                    return;
                }
            }
            var response = await Http.PutAsJsonAsync($"/rest/director/{_changedObject.id}", _changedObject);

            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Uložení změn bylo úspěšné", Severity.Success);
            }
            else if (response.StatusCode == HttpStatusCode.Conflict)
            {
                Snackbar.Add("Režisér musí mít unikátní jméno a rok narození", Severity.Error);

            }
            else
            {
                Snackbar.Add($"Uložení vrátilo chybový kód: {response.StatusCode}", Severity.Error);
            }
            await RefreshList();
        }
    }
    private async Task AddMovieEnable()
    {
        await _form.Validate();
        _movieAdd = true;
    }

    private async Task AddMovie()
    {
        if (movieRelease < _changedObject.yearOfBirth)
        {
            Snackbar.Add("Film nemůže být starší než režisér", Severity.Error);
            return;
        }
        foreach (var movieDto in _movieData)
        {
            if (movieRelease == movieDto.releaseYear && movieName == movieDto.name)
            {
                Snackbar.Add("Režisér již tento film má", Severity.Error);
                return;
            }
        }
        var result = await Http.GetFromJsonAsync<List<MovieDTO>>($"/rest/movie/movie?name={movieName}&year={movieRelease}");
        if (result != null)
        {
            if (result.Count == 0)
            {
                Snackbar.Add("Zadaný film nebyl nalezen", Severity.Error);
            }
            else
            {
                Snackbar.Add("Film byl úspěšně nalezen", Severity.Success);
                _changedObject.moviesDirected.Add(result.First().id);
                _movieData.Add(result.First());
            }
        }
        await CancelClicked();
    }

    private async Task CancelClicked()
    {
        movieRelease = 0;
        movieName = "";
        await _formMovie.ResetAsync();
        _movieAdd = false;
    }

    private async Task GetMovies()
    {
        var result = await Http.GetFromJsonAsync<List<MovieDTO>>($"/rest/movie/director/{Id}");
        if (result == null)
        {
            return;
        }

        _movieData = result;
        StateHasChanged();
    }
    
    public async Task RemoveMovie(MovieDTO movie)
    {
        await _form.Validate();
        _changedObject.moviesDirected.Remove(movie.id); 
        _movieData.Remove(movie);
        
        StateHasChanged();
    }
}